
// Code generated by cool go-validate tool; DO NOT EDIT.

package models

import (
	"errors"
	"regexp"
)

type ValidationError struct {
	Field   string
	Err error
}

func (o User) Validate() ([]ValidationError, error) {
	validationErrorList := []ValidationError{}
	err := ValidationError{}

	func() {
		re := regexp.MustCompile("^\\w+@\\w+\\.\\w+$")
		if !re.MatchString(o.Email) {
			err = ValidationError{"Email", errors.New("failed to validate field Email with condition regexp:^\\w+@\\w+\\.\\w+$")}
			validationErrorList = append(validationErrorList, err)
		}
	}()

	func() {
		switch o.Role {
		case "admin","stuff":
		default:
			err = ValidationError{"Role", errors.New("failed to validate field Role with condition in:admin,stuff")}
			validationErrorList = append(validationErrorList, err)
		}
	}()
	for _, v := range o.Phones {

	func() {
		if len(v) != 11 {
			err = ValidationError{"Phones", errors.New("failed to validate field Phones with condition len:11")}
			validationErrorList = append(validationErrorList, err)
		}
	}()

		if err.Err != nil {
			break
		}
	}

	func() {
		if len(o.ID) != 36 {
			err = ValidationError{"ID", errors.New("failed to validate field ID with condition len:36")}
			validationErrorList = append(validationErrorList, err)
		}
	}()

	func() {
		if o.Age < 18 {
			err = ValidationError{"Age", errors.New("failed to validate field Age with condition min:18")}
			validationErrorList = append(validationErrorList, err)
		}
	}()

	func() {
		if o.Age > 50 {
			err = ValidationError{"Age", errors.New("failed to validate field Age with condition max:50")}
			validationErrorList = append(validationErrorList, err)
		}
	}()
	return validationErrorList, nil
}

func (o App) Validate() ([]ValidationError, error) {
	validationErrorList := []ValidationError{}
	err := ValidationError{}

	func() {
		if len(o.Version) != 5 {
			err = ValidationError{"Version", errors.New("failed to validate field Version with condition len:5")}
			validationErrorList = append(validationErrorList, err)
		}
	}()
	return validationErrorList, nil
}

func (o Response) Validate() ([]ValidationError, error) {
	validationErrorList := []ValidationError{}
	err := ValidationError{}

	func() {
		switch o.Code {
		case 200,404,500:
		default:
			err = ValidationError{"Code", errors.New("failed to validate field Code with condition in:200,404,500")}
			validationErrorList = append(validationErrorList, err)
		}
	}()
	return validationErrorList, nil
}
